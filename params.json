{
  "name": "TestABean",
  "tagline": "A library to avoid boilerplate when testing beans and simple data objectes",
  "body": "#TestABean\r\n\r\n\"Tired of testing beans (aka: objects with just gettes/setters and no logic)? Do not test them!\"\r\n\r\n\"But,but,but... They are code, so they need to be tested.\"\r\n\r\n\"So test them! But you don't have to write the tests by yourself!\"\r\n\r\n\"But, but, but... how?\"\r\n\r\n\"I'm happy you made that question...\"\r\n\r\nTestABean is a library intended to help you perform basic testing on plain data objects (or Beans to generalize).\r\n\r\n## Usage [![Build Status](https://travis-ci.org/sergiandreplace/TestABean.svg?branch=master)](https://travis-ci.org/sergiandreplace/TestABean)\r\n\r\nJust execute:\r\n\r\n``` Java\r\nnew TestABean(MyBean.class).test();\r\n```\r\n\r\nIt will check the following:\r\n\r\n* All the declared fields should have a getter and a setter (or a \"is\" method for getter in case of booleans)\r\n* All the declared fields can perform a set and then retrieve the same value with a get\r\n* All the declared fields support transitive property. So, after:\r\n\r\n``` Java\r\na.setValue(x);\r\nb.setValue(a.getValue());\r\nc.setValue(b.getValue());\r\n```\r\n\r\nThe following should be true\r\n\r\n``` Java\r\nc.getValue() == x;\r\n```\r\n\r\nThe retrieval and transivite checks are run 100 times each by default on each field with different random values.\r\n\r\n## Adding it to your project\r\n\r\nUops! Still working on it. Testing a lot of cases, finishing Javadoc and uploading to mavenCentral. Just give me some time :)\r\n\r\nFor the time being download it and include in your project if you want to use it.\r\n\r\n## Configuration\r\n\r\nWhen instancing your TestABean object, you can provide a Configuration object with different parameters:\r\n\r\n``` Java\r\nConfiguration configuration=new Configuration.Builder()\r\n                            .setGeneratorFactory(generatorFactory)  // Uses a different GeneratorFactory\r\n                                                                    // See later for further discussion\r\n                            .setExceptions(\"readOnlyField\") // Sets a list of fields to not check (readonly, with logic, etc)\r\n                            .TestingRepetitions(100) // Sets the number of times tests will be repeated. 100 by default.\r\n                            .build();\r\nnew TestABean(MyBean.class, configuration).test();\r\n```\r\n\r\n## Generators\r\n\r\nGenerators are responsible for creating new random values to test getters and setters. By default, generators are made for primitives and their boxed classes. \r\nIn order to create a new one, you must extend the class Generator<T> and use the annotation @TargetClass to define which classes will be affected by this generator\r\n(ex: IntGenerator targets both Integer and int); then, add your generator to a GeneratorFactory instance;\r\n\r\n## Exceptions\r\n\r\nIn some cases, there are fields we don't want to check for many reasons (read only fields, complex data types, etc). If this is the case, you can\r\nmake TestABuild ignore them. You can do it in two ways:\r\n\r\n* With the setExceptions method of the Configuration Builder\r\n* Annotating your field with @NotABeanField\r\n\r\n## TODO\r\n\r\nThis is just an initial version and there is room for a lot of improvement. These are some things in the roadmap:\r\n\r\n* Ability to inject new checks\r\n* Recursive check for nested classes\r\n* Increase configuration for more flexible tests\r\n\r\n## License\r\n\r\n```\r\n\r\nCopyright 2016 Sergi Mart√≠nez\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n   http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n```",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}